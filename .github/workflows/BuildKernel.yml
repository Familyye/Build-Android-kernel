name: Build Kernel
on:
  workflow_dispatch:

env:
  CONFIG: "config.json"
  OUTPUT_DIR: "out"

jobs:
  read_config:
    runs-on: ubuntu-latest
    outputs:
      matrix_tools_preset: ${{ steps.config.outputs.matrix_tools_preset }}
      run_build: ${{ steps.config.outputs.run_build }}
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Set up jq"
        run: sudo apt-get install -y jq

      - name: "Read config -- 读取配置"
        id: config
        run: |
          echo "Reading configuration from $CONFIG_FILE"
          CONFIG_FILE="$GITHUB_WORKSPACE/$CONFIG"

          USE_PRESET=$(jq -r '.tools_config.use_preset' $CONFIG_FILE)
          USE_MATRIX=$(jq -r '.tools_config.use_matrix' $CONFIG_FILE)
          CUSTOM=$(jq -r '.tools_config.custom' $CONFIG_FILE)

          echo "USE_PRESET: $USE_PRESET"
          echo "USE_MATRIX: $USE_MATRIX"
          echo "CUSTOM: $CUSTOM"

          set_tools_env_vars() {
            local tools_json=$1
            for tool in $(jq -c 'to_entries[]' <<< "$tools_json"); do
              local tool_name=$(jq -r '.key' <<< "$tool")
              local tool_version=$(jq -r '.value' <<< "$tool")
              echo "Setting environment variable for $tool_name: $tool_version"
              echo "${tool_name}_VERSION=$tool_version" >> $GITHUB_ENV
            done
          }

          if [[ "$CUSTOM" == "true" ]]; then
            echo "Custom tools configuration detected"
            my_custom_tools=$(jq -c '.my_custom_tools' $CONFIG_FILE)
            echo "my_custom_tools: $my_custom_tools"
            echo "my_custom_tools=$my_custom_tools" >> $GITHUB_OUTPUT
            echo "run_build=true" >> $GITHUB_OUTPUT
            set_tools_env_vars "$my_custom_tools"

          elif [[ "$USE_MATRIX" == "true" && "$CUSTOM" == "false" ]]; then
            echo "Matrix tools configuration detected"
            tools_preset=$(jq -c '.tools_preset' $CONFIG_FILE)
            echo "tools_preset: $tools_preset"
            echo "matrix_tools_preset=$(jq -c . <<< \"$tools_preset\")" >> $GITHUB_OUTPUT
            echo "run_build=true" >> $GITHUB_OUTPUT

          elif [[ "$USE_MATRIX" == "false" && "$CUSTOM" == "false" ]]; then
            echo "Preset tools configuration detected"
            tools_preset=$(jq -c --arg preset "$USE_PRESET" '.tools_preset[$preset]' $CONFIG_FILE)
            echo "tools_preset: $tools_preset"
            echo "matrix_tools_preset=$(jq -c . <<< \"$tools_preset\")" >> $GITHUB_OUTPUT
            echo "run_build=true" >> $GITHUB_OUTPUT
            set_tools_env_vars "$tools_preset"

          else
            echo "No matching build conditions found, skipping build."
            echo "run_build=false" >> $GITHUB_OUTPUT
          fi

      - name: "Debug outputs"
        run: |
          echo "Matrix Tools Preset: ${{ steps.config.outputs.matrix_tools_preset }}"
          echo "Run Build: ${{ steps.config.outputs.run_build }}"

  build:
    name: "Build Kernel"
    runs-on: ubuntu-latest
    needs: read_config
    if: ${{ needs.read_config.outputs.run_build == 'true' }}
    strategy:
      matrix:
        tools: ${{ fromJson(needs.read_config.outputs.matrix_tools_preset) }}
      fail-fast: false
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Set up jq"
        run: sudo apt-get install -y jq

      - name: "Cache dependencies"
        uses: actions/cache@v4
        with:
          path: /usr/local/bin
          key: ${{ runner.os }}-gcc-${{ matrix.tools.aarch64-linux-android- }}-clang-${{ matrix.tools.clang }}-ld-${{ matrix.tools.ld }}-make-${{ matrix.tools.make }}-objcopy-${{ matrix.tools.objcopy }}-objdump-${{ matrix.tools.objdump }}-strip-${{ matrix.tools.strip }}
          restore-keys: |
            ${{ runner.os }}-gcc-${{ matrix.tools.aarch64-linux-android- }}-clang-${{ matrix.tools.clang }}-ld-${{ matrix.tools.ld }}-make-${{ matrix.tools.make }}-objcopy-${{ matrix.tools.objcopy }}-objdump-${{ matrix.tools.objdump }}-strip-${{ matrix.tools.strip }}

      - name: "Download tools -- 下载编译工具"
        run: |
          echo "Downloading tools"
          echo "Update complete"
          echo "Installing specific versions of tools"

      - name: "Build Kernel"
        run: |
          echo "Building kernel"
          # 在此处添加内核构建命令